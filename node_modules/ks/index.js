class Key {
    constructor() {
        this.zero = "+~!~~!~$$$$$";
        this.one = "~~!~~!~$$$$";
        this.two = "#=~!~$$$$$";
        this.three = "*~!~~!~$$$$$";
        this.four = "&~!~~!~$$$$$";
        this.five = "~!~~!~^$$$$$";
        this.six = "~!~~!~#%$$$$";
        this.seven = "~!~~!~#$$$$$";
        this.eight = "~!~~!~#$$#$$";
        this.nine = "~!~~!~#$$$!$";
        this.a = "~*^&%£$@#$%^&*()_+~*^&%£$@#$%^&*()_+";
        this.b = "*^&%£$@#$%^&*()_+~*^&%£$@#$%^&*()_+~";
        this.c = "!&%£$@#$%^&*()_+~*^&%£$@#$%^&*()_+~!";
        this.d = "#$%^&*()_+~*^&%£$@#$%^&*()_+~*^&%£$@";
        this.e = "$%^&*()_+~*^&%£$@#$%^&*()_+~*^&%£$@#";
        this.f = "%^&*()_+~*^&%£$@#$%^&*()_+~*^&%£$@#$";
        this.g = "^&*()_+~*^&%£$@#$%^&*()_+~*^&%£$@#$%";
        this.h = "&*()_+~*^&%£$@#$%^&*()_+~*^&%£$@#$%^";
        this.i = "*()_+~*^&%£$@#$%^&*()_+~*^&%£$@#$%^&";
        this.j = "()_+~*^&%£$@#$%^&*()_+~*^&%£$@#$%^&*";
        this.k = ")_+~*^&%£$@#$%^&*()_+~*^&%£$@#$%^&*(";
        this.l = "_+~*^&%£$@#$%^&*()_+~*^&%£$@#$%^&*()";
        this.m = "+~*^&%£$@#$%^&*()_+~*^&%£$@#$%^&*()_";
        this.n = "+_)(*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~";
        this.o = "_)(*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~+";
        this.p = ")(*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~_";
        this.q = "(*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)";
        this.r = "*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(";
        this.s = "&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(*";
        this.t = "^%$#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(*&";
        this.u = "%$#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(*&^";
        this.v = "$#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(*&^%";
        this.w = "#!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(*&^%$";
        this.x = "!&%£$@!~+_)(*&^%$#!&%£$@!~+_)(*&^%$#";
        this.y = "!~+_)(*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@";
        this.z = "~+_)(*&^%$#!&%£$@!~+_)(*&^%$#!&%£$@!";
        this.A = "~*^&%£$@#$%^&*()_+.~*^&%£$@#$%^&*()_+";
        this.B = "*^&%£$@#$%^&*()_+~.*^&%£$@#$%^&*()_+~";
        this.C = "!&%£$@#$%^&*()_+~.*^&%£$@#$%^&*()_+~!";
        this.D = "#$%^&*()_+~*^&%£$@.#$%^&*()_+~*^&%£$@";
        this.E = "$%^&*()_+~*^&%£$@#.$%^&*()_+~*^&%£$@#";
        this.F = "%^&*()_+~*^&%£$@#.$%^&*()_+~*^&%£$@#$";
        this.G = "^&*()_+~*^&%£$@#$.%^&*()_+~*^&%£$@#$%";
        this.H = "&*()_+~*^&%£$@#$%^.&*()_+~*^&%£$@#$%^";
        this.I = "*()_+~*^&%£$@#$%^&.*()_+~*^&%£$@#$%^&";
        this.J = "()_+~*^&%£$@#$%^&.*()_+~*^&%£$@#$%^&*";
        this.K = ")_+~*^&%£$@#$%^&*(.)_+~*^&%£$@#$%^&*(";
        this.L = "_+~*^&%£$@#$%^&*()._+~*^&%£$@#$%^&*()";
        this.M = "+~*^&%£$@#$%^&*()_.+~*^&%£$@#$%^&*()_";
        this.N = "+_)(*&^%$#!&%£$@!.~+_)(*&^%$#!&%£$@!~";
        this.O = "_)(*&^%$#!&%£$@!~.+_)(*&^%$#!&%£$@!~+";
        this.P = ")(*&^%$#!&%£$@!~+._)(*&^%$#!&%£$@!~_";
        this.Q = "(*&^%$#!&%£$@!~+_).(*&^%$#!&%£$@!~+_)";
        this.R = "*&^%$#!&%£$@!~+_)(.*&^%$#!&%£$@!~+_)(";
        this.S = "&^%$#!&%£$@!~+_)(.*&^%$#!&%£$@!~+_)(*";
        this.T = "^%$#!&%£$@!~+_)(*.&^%$#!&%£$@!~+_)(*&";
        this.U = "%$#!&%£$@!~+_)(*&^.%$#!&%£$@!~+_)(*&^";
        this.V = "$#!&%£$@!~+_)(*&^%.$#!&%£$@!~+_)(*&^%";
        this.W = "#!&%£$@!~+_)(*&^%$.#!&%£$@!~+_)(*&^%$";
        this.X = "!&%£$@!~+_)(*&^%$#.!&%£$@!~+_)(*&^%$#";
        this.Y = "!~+_)(*&^%$#!&%£$@.!~+_)(*&^%$#!&%£$@";
        this.Z = "~+_)(*&^%$#!&%£$@!.~+_)(*&^%$#!&%£$@!";
        this.sep = "|";
        this.exclamation = "[]{}:;?<>,";
        this.asterix = "]{}:;?<>,[";
        this.pound = "{}:;?<>,[]";
        this.dols = "}:;?<>,[]{";
        this.percentage = ":;?<>,[]{}";
        this.ampersand = ";?<>,[]{}:";
        this.singleQuote = "?<>,[]{}:;";
        this.apostrophe = "??<>{}[]:;,";
        this.leftParenthesis = "<>,[]{}:;?";
        this.rightParenthesis = ">,[]{}:;?<";
        this.doubleQuote = ",[]{}:;?<>";
        this.plus = "?>,[]{}:;<";
        this.comma = "?<,[]{}:;>";
        this.hyphen = "?[],{}:;<>";
        this.dot = "?[,{}:;<>]";
        this.forSlash = "?{[;<,>:]}";
        this.backSlash = "?,:<>[]{};";
        this.colon = "<{[;,:]}?>";
        this.semicolon = "<{[:?;]}>,";
        this.lessThan = ">[;,?{}:]<";
        this.greaterThan = ">[;},{?:]<";
        this.equality = ":<[]{}>;,?";
        this.questionMark = ">,}]?[{<";
        this.at = ",>?{[}]<;:";
        this.leftBrace = ":{}[,]<>?;";
        this.rightBrace = "},[;:}{<>?";
        this.index = "}?,;<:}][";
        this.underscore = "},:]{?>[<";
        this.leftBracket = ";,>{<}[]?:";
        this.rightBracket = ";]{:}[,<?>";
        this.tilde = "[?{;:}]<>,";
        this.space = "[,<:>}{/]";
        this.pipe = "{;:<,?>[]}";
        this.charConverter = function(raw) {
            var converted = sep;
            if (raw === ("0")) {
                converted = zero;
            } else if (raw === ("1")) {
                converted = one;
            } else if (raw === ("2")) {
                converted = two;
            } else if (raw === ("3")) {
                converted = three;
            } else if (raw === ("4")) {
                converted = four;
            } else if (raw === ("5")) {
                converted = five;
            } else if (raw === ("6")) {
                converted = six;
            } else if (raw === ("7")) {
                converted = seven;
            } else if (raw === ("8")) {
                converted = eight;
            } else if (raw === ("9")) {
                converted = nine;
            } else if (raw === ("a")) {
                converted = a;
            } else if (raw === ("b")) {
                converted = b;
            } else if (raw === ("c")) {
                converted = c;
            } else if (raw === ("d")) {
                converted = d;
            } else if (raw === ("e")) {
                converted = e;
            } else if (raw === ("f")) {
                converted = f;
            } else if (raw === ("g")) {
                converted = g;
            } else if (raw === ("h")) {
                converted = h;
            } else if (raw === ("i")) {
                converted = i;
            } else if (raw === ("j")) {
                converted = j;
            } else if (raw === ("k")) {
                converted = k;
            } else if (raw === ("l")) {
                converted = l;
            } else if (raw === ("m")) {
                converted = m;
            } else if (raw === ("n")) {
                converted = n;
            } else if (raw === ("o")) {
                converted = o;
            } else if (raw === ("p")) {
                converted = p;
            } else if (raw === ("q")) {
                converted = q;
            } else if (raw === ("r")) {
                converted = r;
            } else if (raw === ("s")) {
                converted = s;
            } else if (raw === ("t")) {
                converted = t;
            } else if (raw === ("u")) {
                converted = u;
            } else if (raw === ("v")) {
                converted = v;
            } else if (raw === ("w")) {
                converted = w;
            } else if (raw === ("x")) {
                converted = x;
            } else if (raw === ("y")) {
                converted = y;
            } else if (raw === ("z")) {
                converted = z;
            } else if (raw === ("A")) {
                converted = A;
            } else if (raw === ("B")) {
                converted = B;
            } else if (raw === ("C")) {
                converted = C;
            } else if (raw === ("D")) {
                converted = D;
            } else if (raw === ("E")) {
                converted = E;
            } else if (raw === ("F")) {
                converted = F;
            } else if (raw === ("G")) {
                converted = G;
            } else if (raw === ("H")) {
                converted = H;
            } else if (raw === ("I")) {
                converted = I;
            } else if (raw === ("J")) {
                converted = J;
            } else if (raw === ("K")) {
                converted = K;
            } else if (raw === ("L")) {
                converted = L;
            } else if (raw === ("M")) {
                converted = M;
            } else if (raw === ("N")) {
                converted = N;
            } else if (raw === ("O")) {
                converted = O;
            } else if (raw === ("P")) {
                converted = P;
            } else if (raw === ("Q")) {
                converted = Q;
            } else if (raw === ("R")) {
                converted = R;
            } else if (raw === ("S")) {
                converted = S;
            } else if (raw === ("T")) {
                converted = T;
            } else if (raw === ("U")) {
                converted = U;
            } else if (raw === ("V")) {
                converted = V;
            } else if (raw === ("W")) {
                converted = W;
            } else if (raw === ("X")) {
                converted = X;
            } else if (raw === ("Y")) {
                converted = Y;
            } else if (raw === ("Z")) {
                converted = Z;
            } else if (raw === ("!")) {
                converted = exclamation;
            } else if (raw === ("`")) {
                converted = apostrophe;
            } else if (raw === ("*")) {
                converted = asterix;
            } else if (raw === ("#")) {
                converted = pound;
            } else if (raw === ("$")) {
                converted = dols;
            } else if (raw === ("%")) {
                converted = percentage;
            } else if (raw === ("&")) {
                converted = ampersand;
            } else if (raw === ("\'")) {
                converted = singleQuote;
            } else if (raw === ("(")) {
                converted = leftParenthesis;
            } else if (raw === (")")) {
                converted = rightParenthesis;
            } else if (raw === ("\"")) {
                converted = doubleQuote;
            } else if (raw === ("+")) {
                converted = plus;
            } else if (raw === (",")) {
                converted = comma;
            } else if (raw === ("-")) {
                converted = hyphen;
            } else if (raw === (".")) {
                converted = dot;
            } else if (raw === ("/")) {
                converted = forSlash;
            } else if (raw === ("\\")) {
                converted = backSlash;
            } else if (raw === (":")) {
                converted = colon;
            } else if (raw === (";")) {
                converted = semicolon;
            } else if (raw === ("<")) {
                converted = lessThan;
            } else if (raw === (">")) {
                converted = greaterThan;
            } else if (raw === ("=")) {
                converted = equality;
            } else if (raw === ("?")) {
                converted = questionMark;
            } else if (raw === ("@")) {
                converted = at;
            } else if (raw === ("[")) {
                converted = leftBrace;
            } else if (raw === ("]")) {
                converted = rightBrace;
            } else if (raw === ("^")) {
                converted = index;
            } else if (raw === ("_")) {
                converted = underscore;
            } else if (raw === ("{")) {
                converted = leftBracket;
            } else if (raw === ("}")) {
                converted = rightBracket;
            } else if (raw === ("~")) {
                converted = tilde;
            } else if (raw === (" ")) {
                converted = space;
            } else if (raw === ("|")) {
                converted = pipe;
            }

            return converted;

        }
        this.retriever = function(coded) {
            var converted = sep;
            if (zero === (coded)) {
                converted = "0";
            } else if (one === (coded)) {
                converted = "1";
            } else if (two === (coded)) {
                converted = "2";
            } else if (three === (coded)) {
                converted = "3";
            } else if (four === (coded)) {
                converted = "4";
            } else if (five === (coded)) {
                converted = "5";
            } else if (six === (coded)) {
                converted = "6";
            } else if (seven === (coded)) {
                converted = "7";
            } else if (eight === (coded)) {
                converted = "8";
            } else if (nine === (coded)) {
                converted = "9";
            } else if (a === (coded)) {
                converted = "a";
            } else if (b === (coded)) {
                converted = "b";
            } else if (c === (coded)) {
                converted = "c";
            } else if (d === (coded)) {
                converted = "d";
            } else if (e === (coded)) {
                converted = "e";
            } else if (f === (coded)) {
                converted = "f";
            } else if (g === (coded)) {
                converted = "g";
            } else if (h === (coded)) {
                converted = "h";
            } else if (i === (coded)) {
                converted = "i";
            } else if (j === (coded)) {
                converted = "j";
            } else if (k === (coded)) {
                converted = "k";
            } else if (l === (coded)) {
                converted = "l";
            } else if (m === (coded)) {
                converted = "m";
            } else if (n === (coded)) {
                converted = "n";
            } else if (o === (coded)) {
                converted = "o";
            } else if (p === (coded)) {
                converted = "p";
            } else if (q === (coded)) {
                converted = "q";
            } else if (r === (coded)) {
                converted = "r";
            } else if (s === (coded)) {
                converted = "s";
            } else if (t === (coded)) {
                converted = "t";
            } else if (u === (coded)) {
                converted = "u";
            } else if (v === (coded)) {
                converted = "v";
            } else if (w === (coded)) {
                converted = "w";
            } else if (x === (coded)) {
                converted = "x";
            } else if (y === (coded)) {
                converted = "y";
            } else if (z === (coded)) {
                converted = "z";
            } else if (A === (coded)) {
                converted = "A";
            } else if (B === (coded)) {
                converted = "B";
            } else if (C === (coded)) {
                converted = "C";
            } else if (D === (coded)) {
                converted = "D";
            } else if (E === (coded)) {
                converted = "E";
            } else if (F === (coded)) {
                converted = "F";
            } else if (G === (coded)) {
                converted = "G";
            } else if (H === (coded)) {
                converted = "H";
            } else if (I === (coded)) {
                converted = "I";
            } else if (J === (coded)) {
                converted = "J";
            } else if (K === (coded)) {
                converted = "K";
            } else if (L === (coded)) {
                converted = "L";
            } else if (M === (coded)) {
                converted = "M";
            } else if (N === (coded)) {
                converted = "N";
            } else if (O === (coded)) {
                converted = "O";
            } else if (P === (coded)) {
                converted = "P";
            } else if (Q === (coded)) {
                converted = "Q";
            } else if (R === (coded)) {
                converted = "R";
            } else if (S === (coded)) {
                converted = "S";
            } else if (T === (coded)) {
                converted = "T";
            } else if (U === (coded)) {
                converted = "U";
            } else if (V === (coded)) {
                converted = "V";
            } else if (W === (coded)) {
                converted = "W";
            } else if (X === (coded)) {
                converted = "X";
            } else if (Y === (coded)) {
                converted = "Y";
            } else if (Z === (coded)) {
                converted = "Z";
            } else if (exclamation === (coded)) {
                converted = "!";
            } else if (asterix === (coded)) {
                converted = "*";
            } else if (apostrophe === (coded)) {
                converted = "`";
            } else if (pound === (coded)) {
                converted = "#";
            } else if (dols === (coded)) {
                converted = "$";
            } else if (percentage === (coded)) {
                converted = "%";
            } else if (ampersand === (coded)) {
                converted = "&";
            } else if (singleQuote === (coded)) {
                converted = "'";
            } else if (leftParenthesis === (coded)) {
                converted = "(";
            } else if (rightParenthesis === (coded)) {
                converted = ")";
            } else if (doubleQuote === (coded)) {
                converted = "\"";
            } else if (plus === (coded)) {
                converted = "+";
            } else if (comma === (coded)) {
                converted = ",";
            } else if (hyphen === (coded)) {
                converted = "-";
            } else if (dot === (coded)) {
                converted = ".";
            } else if (forSlash === (coded)) {
                converted = "/";
            } else if (backSlash === (coded)) {
                converted = "\\";
            } else if (colon === (coded)) {
                converted = ":";
            } else if (semicolon === (coded)) {
                converted = ";";
            } else if (lessThan === (coded)) {
                converted = "<";
            } else if (greaterThan === (coded)) {
                converted = ">";
            } else if (equality === (coded)) {
                converted = "=";
            } else if (questionMark === (coded)) {
                converted = "?";
            } else if (at === (coded)) {
                converted = "@";
            } else if (leftBrace === (coded)) {
                converted = "[";
            } else if (rightBrace === (coded)) {
                converted = "]";
            } else if (index === (coded)) {
                converted = "^";
            } else if (underscore === (coded)) {
                converted = "_";
            } else if (leftBracket === (coded)) {
                converted = "{";
            } else if (rightBracket === (coded)) {
                converted = "}";
            } else if (tilde === (coded)) {
                converted = "~";
            } else if (space === (coded)) {
                converted = " ";
            } else if (pipe === (coded)) {
                converted = "|";
            }

            return converted;

        }
        this.scramble = function(plain) {
            var coded = "";
            try {
                var span = plain.Length;
                for (var cursor = 0; cursor < span; cursor++) {
                    var temp = "" + plain[cursor];
                    coded += charConverter(temp);
                    coded += sep;
                }

            } catch (e) {
                Console.log(e.Message);
                Console.log(e.StackTrace);
            }

            return coded;
        }
        this.decipher = function(coded) {
            var plain = "";
            var span = coded.Length;
            var buf = "";
            for (var cursor = 0; cursor < span; cursor++) {
                var temp = "" + coded[cursor];
                if (!temp === ("|")) buf += coded[cursor];
                else {
                    plain += retriever(buf);
                    buf = "";
                }
            }

            return plain;
        }

    }
}

module.exports.Key = Key;